# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gogzVv5lEm2asHdhEYRE02I3qGo_p2yc
"""

import streamlit as st
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import json

# Function to process uploaded file
def process_file(uploaded_file):
    # Read JSON file into a DataFrame
    both_data = json.load(uploaded_file)
    df_nested_list_both = pd.json_normalize(both_data, record_path=['responses'])

    # Reorder DataFrame
    def reorder(df_nested_list):
        df_nested_list = df_nested_list[1:]
        n = len(df_nested_list)
        for index, row in df_nested_list.iterrows():
            if (index-1)%9 == 0 and index+4 < n:
                center = df_nested_list.loc[index].values
                df_nested_list.loc[index] = df_nested_list.loc[index+1].values
                df_nested_list.loc[index+1] = df_nested_list.loc[index+2].values
                df_nested_list.loc[index+2] = df_nested_list.loc[index+3].values
                df_nested_list.loc[index+3] = df_nested_list.loc[index+4].values
                df_nested_list.loc[index+4] = center
        return df_nested_list

    df_nested_list_both = reorder(df_nested_list_both)

    df_combined = df_nested_list_both[["frequency", "position", "contrast"]]
    df_combined['position'] = df_combined["position"].map(str)
    df_combined['frequency'] = df_combined['frequency'].map(float)
    df_combined['contrast'] = df_combined['contrast'].map(float)

    df_combined.loc[:, 'frequency'] *= 28
    df_combined.loc[:, 'contrast'] = 1 / df_combined['contrast']

    df_combined = df_combined.copy()

    return df_combined

# Streamlit UI
st.title('Data Processing and Plotting Tool')

# Upload file
uploaded_file = st.file_uploader("Upload your JSON file", type="json")

if uploaded_file is not None:
    # Process the uploaded file
    df_combined = process_file(uploaded_file)

    # Convert position to string for easier handling in plots
    df_combined['position'] = df_combined['position'].astype(str)

    # Number of unique positions
    positions = df_combined['position'].unique()

    # Set up the plotting area to have 9 subplots (3x3 grid)
    fig, axes = plt.subplots(3, 3, figsize=(15, 12))

    # Flatten the axes array for easier iteration
    axes = axes.flatten()

    # Create a plot for each position
    for i, position in enumerate(positions):
        ax = axes[i]
        subset = df_combined[df_combined['position'] == position]

        # Group by frequency and calculate mean, std, and standard error
        stats = subset.groupby('frequency')['contrast'].agg(['mean', 'std', 'count'])
        stats['stderr'] = stats['std'] / np.sqrt(stats['count'])

        if not stats.empty and not stats['std'].isnull().all():
            # Plot with error bars for standard deviation and standard error
            ax.errorbar(stats.index, stats['mean'], yerr=stats['std'], fmt='o-', label='Mean ± Std Dev')
            ax.errorbar(stats.index, stats['mean'], yerr=stats['stderr'], fmt='o-', label='Mean ± Std Error', linestyle='--', color='gray')
        else:
            # Plot without error bars if standard deviation is empty or all NaN
            ax.plot(stats.index, stats['mean'], 'o-', label='Mean')

        ax.set_xlabel('Spatial Frequency (cycles/degree)')
        ax.set_ylabel('Contrast Sensitivity Function (CSF)')
        ax.set_yscale('log')
        ax.set_ylim(0.5, 200)
        ax.set_title(f'Position {position}')
        ax.grid(True)
        ax.legend()

    # Remove any unused subplots
    for j in range(i+1, 9):
        fig.delaxes(axes[j])

    # Adjust layout to prevent overlapping
    plt.tight_layout()

    # Display the plot in Streamlit
    st.pyplot(fig)